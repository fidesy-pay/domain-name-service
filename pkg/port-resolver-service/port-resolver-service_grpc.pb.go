// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: api/port-resolver-service/port-resolver-service.proto

package port_resolver_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PortResolverService_GetPort_FullMethodName    = "/port_resolver_service.PortResolverService/GetPort"
	PortResolverService_UpdatePort_FullMethodName = "/port_resolver_service.PortResolverService/UpdatePort"
)

// PortResolverServiceClient is the client API for PortResolverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortResolverServiceClient interface {
	GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*GetPortResponse, error)
	UpdatePort(ctx context.Context, in *UpdatePortRequest, opts ...grpc.CallOption) (*UpdatePortResponse, error)
}

type portResolverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortResolverServiceClient(cc grpc.ClientConnInterface) PortResolverServiceClient {
	return &portResolverServiceClient{cc}
}

func (c *portResolverServiceClient) GetPort(ctx context.Context, in *GetPortRequest, opts ...grpc.CallOption) (*GetPortResponse, error) {
	out := new(GetPortResponse)
	err := c.cc.Invoke(ctx, PortResolverService_GetPort_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portResolverServiceClient) UpdatePort(ctx context.Context, in *UpdatePortRequest, opts ...grpc.CallOption) (*UpdatePortResponse, error) {
	out := new(UpdatePortResponse)
	err := c.cc.Invoke(ctx, PortResolverService_UpdatePort_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortResolverServiceServer is the server API for PortResolverService service.
// All implementations must embed UnimplementedPortResolverServiceServer
// for forward compatibility
type PortResolverServiceServer interface {
	GetPort(context.Context, *GetPortRequest) (*GetPortResponse, error)
	UpdatePort(context.Context, *UpdatePortRequest) (*UpdatePortResponse, error)
	mustEmbedUnimplementedPortResolverServiceServer()
}

// UnimplementedPortResolverServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPortResolverServiceServer struct {
}

func (UnimplementedPortResolverServiceServer) GetPort(context.Context, *GetPortRequest) (*GetPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPort not implemented")
}
func (UnimplementedPortResolverServiceServer) UpdatePort(context.Context, *UpdatePortRequest) (*UpdatePortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePort not implemented")
}
func (UnimplementedPortResolverServiceServer) mustEmbedUnimplementedPortResolverServiceServer() {}

// UnsafePortResolverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortResolverServiceServer will
// result in compilation errors.
type UnsafePortResolverServiceServer interface {
	mustEmbedUnimplementedPortResolverServiceServer()
}

func RegisterPortResolverServiceServer(s grpc.ServiceRegistrar, srv PortResolverServiceServer) {
	s.RegisterService(&PortResolverService_ServiceDesc, srv)
}

func _PortResolverService_GetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortResolverServiceServer).GetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortResolverService_GetPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortResolverServiceServer).GetPort(ctx, req.(*GetPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortResolverService_UpdatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortResolverServiceServer).UpdatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortResolverService_UpdatePort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortResolverServiceServer).UpdatePort(ctx, req.(*UpdatePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortResolverService_ServiceDesc is the grpc.ServiceDesc for PortResolverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortResolverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "port_resolver_service.PortResolverService",
	HandlerType: (*PortResolverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPort",
			Handler:    _PortResolverService_GetPort_Handler,
		},
		{
			MethodName: "UpdatePort",
			Handler:    _PortResolverService_UpdatePort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/port-resolver-service/port-resolver-service.proto",
}
